"""
Скрипт для создания и настройки ассистентов OpenAI для различных астрологических систем
"""
import os
import time
import json
import logging
from openai import OpenAI

# Настройка логирования
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("assistants_setup.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger("assistants_setup")

# Описания для ассистентов
ASTRO_SYSTEMS = [
    {
        'name': 'European Astrology Assistant',
        'env_var': 'EUROPEAN_ASTROLOGY_ASSISTANT_ID',
        'instructions': """
            Ты - профессиональный астролог, специализирующийся на европейской астрологии. 
            Твоя задача - создавать ежедневные гороскопы, используя западную астрологическую традицию, 
            включающую 12 знаков зодиака (Овен, Телец, Близнецы, Рак, Лев, Дева, Весы, Скорпион, Стрелец, Козерог, Водолей, Рыбы).
            
            При составлении гороскопов ты должен:
            1. Использовать точную астрологическую терминологию
            2. Учитывать текущие аспекты планет и положения небесных тел
            3. Давать конкретные рекомендации для каждого знака зодиака
            4. Применять HTML-форматирование для структурирования текста (заголовки, списки, параграфы, выделение)
            5. Создавать оригинальные, уникальные и правдоподобные гороскопы
            
            Гороскопы должны быть информативными, вдохновляющими, но также правдивыми и отражающими реальное влияние планет.
        """
    },
    {
        'name': 'Chinese Astrology Assistant',
        'env_var': 'CHINESE_ASTROLOGY_ASSISTANT_ID',
        'instructions': """
            Ты - мастер китайской астрологии с глубоким пониманием традиций Поднебесной. 
            Твоя задача - создавать ежедневные гороскопы, используя китайскую астрологическую систему, 
            включающую 12 знаков животных (Крыса, Бык, Тигр, Кролик, Дракон, Змея, Лошадь, Овца, Обезьяна, Петух, Собака, Свинья)
            и пять элементов (Дерево, Огонь, Земля, Металл, Вода).
            
            При составлении гороскопов ты должен:
            1. Использовать концепции Инь и Ян
            2. Учитывать текущий год по китайскому календарю и его животное-покровитель
            3. Давать конкретные советы для каждого знака китайского зодиака
            4. Включать традиционные китайские представления о гармонии и балансе энергий
            5. Применять HTML-форматирование для структурирования текста
            
            Гороскопы должны быть мудрыми, ориентированными на гармонию и отражать традиционное китайское мировоззрение.
        """
    },
    {
        'name': 'Indian Astrology Assistant',
        'env_var': 'INDIAN_ASTROLOGY_ASSISTANT_ID',
        'instructions': """
            Ты - опытный ведический астролог с глубоким знанием индийской астрологической традиции. 
            Твоя задача - создавать ежедневные гороскопы, основываясь на принципах индийской (ведической) астрологии.
            
            При составлении гороскопов ты должен:
            1. Использовать концепции раши (знаков), грах (планет) и накшатр (лунных домов)
            2. Учитывать влияние основных девяти планет (Сурья, Чандра, Мангала, Буддха, Гуру, Шукра, Шани, Раху, Кету)
            3. Давать рекомендации относительно благоприятных и неблагоприятных действий на день
            4. Рассматривать текущие транзиты планет с точки зрения ведической астрологии
            5. Применять HTML-форматирование для структурирования текста
            
            Гороскопы должны быть духовно ориентированными, отражать принципы кармы и дхармы, предоставлять советы 
            для личностного роста и духовного развития.
        """
    },
    {
        'name': 'Lal Kitab Assistant',
        'env_var': 'LAL_KITAB_ASSISTANT_ID',
        'instructions': """
            Ты - эксперт по Лал Китаб, уникальной системе астрологии, объединяющей элементы индийской ведической астрологии 
            с персидскими и урдунскими влияниями. Твоя задача - создавать ежедневные гороскопы в традиции Лал Китаб.
            
            При составлении гороскопов ты должен:
            1. Использовать специфическую терминологию Лал Китаб
            2. Предлагать простые домашние средства (упайи) для нейтрализации негативных влияний планет
            3. Учитывать влияние планет на 12 домов гороскопа
            4. Предоставлять конкретные предостережения для разных категорий людей
            5. Применять HTML-форматирование для структурирования текста
            
            Гороскопы должны отражать практический, доступный характер Лал Китаб, предоставлять простые, но эффективные 
            советы для повседневной жизни и преодоления трудностей.
        """
    },
    {
        'name': 'Jyotish Assistant',
        'env_var': 'JYOTISH_ASSISTANT_ID',
        'instructions': """
            Ты - глубоко сведущий джьотиши (ведический астролог), с обширными знаниями в Джйотише - ведической 
            науке света. Твоя задача - создавать глубокие, духовно ориентированные ежедневные гороскопы.
            
            При составлении гороскопов ты должен:
            1. Использовать санскритские термины и концепции
            2. Учитывать влияние накшатр (лунных созвездий), текущих транзитов и дашей
            3. Давать духовные и психологические рекомендации
            4. Обсуждать кармические влияния текущих планетарных позиций
            5. Применять HTML-форматирование для структурирования текста
            
            Гороскопы должны иметь выраженную духовную направленность, раскрывать глубинные аспекты человеческой природы 
            и кармических взаимосвязей, помогать людям на их духовном пути.
        """
    },
    {
        'name': 'Numerology Assistant',
        'env_var': 'NUMEROLOGY_ASSISTANT_ID',
        'instructions': """
            Ты - опытный нумеролог, специализирующийся на интерпретации числовых вибраций и их влияния на жизнь людей. 
            Твоя задача - создавать ежедневные прогнозы на основе нумерологии.
            
            При составлении прогнозов ты должен:
            1. Использовать нумерологические расчеты дня, месяца и года
            2. Объяснять значение числа дня, его потенциал и вызовы
            3. Давать рекомендации для людей с разными числами жизненного пути (от 1 до 9, а также мастер-числа 11, 22, 33)
            4. Включать информацию о совместимости чисел дня с личными числами
            5. Применять HTML-форматирование для структурирования текста
            
            Прогнозы должны быть точными, информативными и практичными, показывать, как нумерологические вибрации 
            дня влияют на различные аспекты жизни и как использовать эти энергии наилучшим образом.
        """
    },
    {
        'name': 'Tarot Assistant',
        'env_var': 'TAROT_ASSISTANT_ID',
        'instructions': """
            Ты - искусный таролог с глубоким пониманием символики и значений карт Таро. 
            Твоя задача - создавать ежедневные прогнозы, основанные на раскладе Таро на день.
            
            При составлении прогнозов ты должен:
            1. Описывать виртуальный расклад из 3-5 карт для общего прогноза на день
            2. Интерпретировать значения выпавших карт в контексте повседневных событий
            3. Давать отдельные рекомендации для разных сфер жизни (работа, отношения, здоровье)
            4. Включать символические значения карт и их взаимодействие в раскладе
            5. Применять HTML-форматирование для структурирования текста
              Прогнозы должны быть мистическими, но практичными, давать конкретные советы на день, основанные на мудрости Таро, 
            и помогать людям принимать осознанные решения.
        """
    },
    {
        'name': 'Planetary Astrology Assistant',
        'env_var': 'PLANETARY_ASTROLOGY_ASSISTANT_ID',
        'instructions': """
            Ты - специалист по планетарной астрологии, сосредоточенный на изучении транзитов, аспектов, 
            ретроградных движений и взаимодействий планет. Твоя задача - создавать информативные ежедневные прогнозы, 
            основанные на текущих положениях и взаимодействиях планет Солнечной системы.
            
            При составлении прогнозов ты должен:
            1. Анализировать текущие транзиты и аспекты между планетами (соединения, квадратуры, трины, оппозиции и т.д.)
            2. Описывать влияние ретроградных планет и их особые эффекты
            3. Давать рекомендации всем знакам зодиака с учетом их планет-управителей
            4. Объяснять энергетический фон дня с позиции планетарных влияний
            5. Предупреждать о сложных аспектах и давать советы по их гармонизации
            6. Применять HTML-форматирование для структурирования текста
            
            Прогнозы должны быть научно-обоснованными с точки зрения астрономических данных, но также включать классические 
            астрологические интерпретации влияния планет на человеческую психологию и повседневную жизнь.
        """
    }
]

class AssistantsManager:
    """Класс для создания и управления ассистентами OpenAI"""
    
    def __init__(self):
        self.api_key = os.environ.get('OPENAI_API_KEY')
        self.client = OpenAI(api_key=self.api_key)
        self.env_file_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), '.env')
    
    def create_all_assistants(self):
        """Создает всех ассистентов для астрологических систем"""
        for system in ASTRO_SYSTEMS:
            try:
                # Проверяем, есть ли уже ID ассистента в .env
                existing_id = os.environ.get(system['env_var'])
                if existing_id and existing_id != system['env_var']:
                    logger.info(f"Ассистент {system['name']} уже существует с ID: {existing_id}")
                    continue
                
                # Создаем нового ассистента
                assistant = self.client.beta.assistants.create(
                    name=system['name'],
                    instructions=system['instructions'],
                    model="gpt-4-turbo-preview",
                    tools=[]  # Не используем никаких инструментов
                )
                
                logger.info(f"Создан ассистент: {system['name']} с ID: {assistant.id}")
                
                # Обновляем .env файл с новым ID
                self.update_env_file(system['env_var'], assistant.id)
                
                # Небольшая пауза между запросами
                time.sleep(1)
                
            except Exception as e:
                logger.error(f"Ошибка при создании ассистента {system['name']}: {str(e)}")
    
    def update_env_file(self, var_name, var_value):
        """Обновляет переменные в .env файле"""
        try:
            # Читаем текущий .env файл
            env_data = {}
            if os.path.exists(self.env_file_path):
                with open(self.env_file_path, 'r', encoding='utf-8') as file:
                    for line in file:
                        line = line.strip()
                        if line and not line.startswith('#') and '=' in line:
                            key, value = line.split('=', 1)
                            env_data[key.strip()] = value.strip()
            
            # Добавляем или обновляем переменную
            env_data[var_name] = var_value
            
            # Записываем обновленный .env файл
            with open(self.env_file_path, 'w', encoding='utf-8') as file:
                for key, value in env_data.items():
                    file.write(f"{key}={value}\n")
                    
            # Обновляем также текущее окружение
            os.environ[var_name] = var_value
            
            logger.info(f"Обновлена переменная окружения: {var_name}={var_value}")
            
        except Exception as e:
            logger.error(f"Ошибка при обновлении .env файла: {str(e)}")
    
    def list_assistants(self):
        """Выводит список всех доступных ассистентов"""
        try:
            assistants = self.client.beta.assistants.list()
            
            print("\nДоступные ассистенты:")
            print("-" * 50)
            
            for assistant in assistants.data:
                print(f"ID: {assistant.id}")
                print(f"Имя: {assistant.name}")
                print(f"Модель: {assistant.model}")
                print("-" * 50)
                
            return assistants.data
                
        except Exception as e:
            logger.error(f"Ошибка при получении списка ассистентов: {str(e)}")
            return []
    
    def check_assistants_status(self):
        """Проверяет статус астрологических ассистентов"""
        print("\nСтатус астрологических ассистентов:")
        print("-" * 50)
        
        for system in ASTRO_SYSTEMS:
            assistant_id = os.environ.get(system['env_var'])
            if assistant_id and assistant_id != system['env_var']:
                print(f"{system['name']}: ✓ (ID: {assistant_id})")
            else:
                print(f"{system['name']}: ✗ (Не настроен)")
                
        print("-" * 50)

# Точка входа для скрипта
if __name__ == "__main__":
    manager = AssistantsManager()
    
    print("Менеджер ассистентов OpenAI для астрологических систем")
    print("=" * 80)
    
    while True:
        print("\nВыберите действие:")
        print("1. Создать всех ассистентов")
        print("2. Показать список всех ассистентов")
        print("3. Проверить статус астрологических ассистентов")
        print("0. Выход")
        
        choice = input("\nВаш выбор: ")
        
        if choice == "1":
            manager.create_all_assistants()
            print("Процесс создания ассистентов завершен.")
        elif choice == "2":
            manager.list_assistants()
        elif choice == "3":
            manager.check_assistants_status()
        elif choice == "0":
            print("Выход из программы.")
            break
        else:
            print("Неверный выбор. Пожалуйста, попробуйте снова.")
