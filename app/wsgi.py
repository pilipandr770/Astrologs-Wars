#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
–§–∞–π–ª –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω-–∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Gunicorn WSGI-—Å–µ—Ä–≤–µ—Ä.
"""

import os
from app import create_app

# –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û—á–∏—Å—Ç–∫–∞ DATABASE_URL –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
db_url = os.environ.get("DATABASE_URL")
if db_url:
    db_url_clean = db_url.strip()
    if db_url != db_url_clean:
        print(f"–ò–°–ü–†–ê–í–õ–ï–ù DATABASE_URL whitespace: {repr(db_url)} -> {repr(db_url_clean)}")
        os.environ["DATABASE_URL"] = db_url_clean
    print(f"DATABASE_URL: {db_url_clean[:50]}...")

app = create_app()

# –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –°–û–ó–î–ê–ù–ò–ï –¢–ê–ë–õ–ò–¶ –ü–†–ò –î–ï–ü–õ–û–ï
with app.app_context():
    try:
        from app import db
        
        print("üöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...")
        
        # –°–æ–∑–¥–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
        db.create_all()
        print("‚úÖ –¢–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω—ã/–ø—Ä–æ–≤–µ—Ä–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
        # –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        from app.models import User
        if not User.query.filter_by(username='admin').first():
            print("üë§ –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é...")
            from werkzeug.security import generate_password_hash
            admin = User(
                username='admin',
                email='admin@astro.com',
                is_admin=True
            )
            admin.password_hash = generate_password_hash('admin123')
            db.session.add(admin)
            db.session.commit()
            print("‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω! Username: admin, Password: admin123")
        else:
            print("üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            
        # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –±–ª–æ–≥–æ–≤ (–µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ)
        try:
            from app.blog_automation.models import AutopostingSchedule
            from app.blog_automation.scheduler import get_scheduler
            
            schedule = AutopostingSchedule.query.filter_by(is_active=True).first()
            if schedule:
                scheduler = get_scheduler(app)
                if scheduler:
                    scheduler.start()
                    print("üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –±–ª–æ–≥–æ–≤ –∑–∞–ø—É—â–µ–Ω")
        except Exception as scheduler_error:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {str(scheduler_error)}")
        
        print("üéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        import traceback
        traceback.print_exc()
        # –ù–µ –≤—ã—Ö–æ–¥–∏–º –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–ø—É—Å–∫

if __name__ == "__main__":
    app.run()
