#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å, –ø—É–±–ª–∏—á–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Ä–∞–±–æ—Ç—É URL
"""

import requests
import json
from bs4 import BeautifulSoup

BASE_URL = "http://127.0.0.1:5000"

def test_public_payment_page():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–±–ª–∏—á–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–ª–∞—Ç–µ–∂–µ–π"""
    print("üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–±–ª–∏—á–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–ª–∞—Ç–µ–∂–µ–π...")
    
    try:
        response = requests.get(f"{BASE_URL}/payment")
        print(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        if response.status_code == 200:
            soup = BeautifulSoup(response.text, 'html.parser')
            
            # –ò—â–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
            payment_cards = soup.find_all('div', class_='payment-card')
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤: {len(payment_cards)}")
            
            for i, card in enumerate(payment_cards, 1):
                title = card.find('h3')
                if title:
                    print(f"  {i}. {title.get_text().strip()}")
                
                # –ò—â–µ–º –∫–Ω–æ–ø–∫–∏ —Å URL
                buttons = card.find_all('a', class_='btn')
                for button in buttons:
                    href = button.get('href', '')
                    text = button.get_text().strip()
                    if href.startswith('http'):
                        print(f"     üîó –ö–Ω–æ–ø–∫–∞: {text} -> {href}")
                
                # –ò—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è QR-–∫–æ–¥–æ–≤
                qr_images = card.find_all('img')
                for img in qr_images:
                    if 'uploads' in img.get('src', ''):
                        print(f"     üì∑ QR-–∫–æ–¥: {img.get('src')}")
            
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        return False

def test_admin_login():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω–∫—É"""
    print("\nüîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω–∫—É...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞
        session = requests.Session()
        login_page = session.get(f"{BASE_URL}/admin/login")
        
        if login_page.status_code != 200:
            print(f"‚ùå –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ª–æ–≥–∏–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {login_page.status_code}")
            return None
            
        soup = BeautifulSoup(login_page.text, 'html.parser')
        
        # –ò—â–µ–º CSRF —Ç–æ–∫–µ–Ω
        csrf_token = None
        csrf_input = soup.find('input', {'name': 'csrf_token'}) or soup.find('input', {'type': 'hidden'})
        if csrf_input:
            csrf_token = csrf_input.get('value')
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è –ª–æ–≥–∏–Ω–∞
        login_data = {
            'username': 'andrii770',
            'password': 'Dnepr75ok10'
        }
        
        if csrf_token:
            login_data['csrf_token'] = csrf_token
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥–∏–Ω
        login_response = session.post(f"{BASE_URL}/admin/login", data=login_data)
        
        if login_response.status_code == 302 or 'dashboard' in login_response.url:
            print("‚úÖ –í—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω–∫—É —É—Å–ø–µ—à–µ–Ω!")
            return session
        else:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ –∞–¥–º–∏–Ω–∫—É: {login_response.status_code}")
            print(f"URL –æ—Ç–≤–µ—Ç–∞: {login_response.url}")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –∞–¥–º–∏–Ω–∫—É: {e}")
        return None

def test_admin_payment_methods(session):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏"""
    print("\nüí≥ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏ –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤...")
    
    if not session:
        print("‚ùå –ù–µ—Ç —Å–µ—Å—Å–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥–º–∏–Ω–∫–∏")
        return False
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏
        response = session.get(f"{BASE_URL}/admin/payment-methods")
        
        if response.status_code == 200:
            soup = BeautifulSoup(response.text, 'html.parser')
            
            # –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –º–µ—Ç–æ–¥–∞–º–∏
            table = soup.find('table', class_='payment-table')
            if table:
                rows = table.find('tbody').find_all('tr') if table.find('tbody') else []
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –º–µ—Ç–æ–¥–æ–≤ –≤ –∞–¥–º–∏–Ω–∫–µ: {len(rows)}")
                
                for i, row in enumerate(rows, 1):
                    cells = row.find_all('td')
                    if len(cells) >= 5:
                        name = cells[0].get_text().strip()
                        type_badge = cells[1].find('span')
                        type_text = type_badge.get_text().strip() if type_badge else "N/A"
                        status_badge = cells[3].find('span')
                        status = status_badge.get_text().strip() if status_badge else "N/A"
                        
                        print(f"  {i}. {name} ({type_text}) - {status}")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ—Ç–∞–ª–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ URL
                        details_cell = cells[4]
                        links = details_cell.find_all('a')
                        for link in links:
                            href = link.get('href', '')
                            if href.startswith('http'):
                                print(f"     üîó URL –≤ –¥–µ—Ç–∞–ª—è—Ö: {href}")
                
                return True
            else:
                print("‚ùå –¢–∞–±–ª–∏—Ü–∞ —Å –º–µ—Ç–æ–¥–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return False
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏: {e}")
        return False

def test_add_payment_method(session):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞"""
    print("\n‚ûï –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞...")
    
    if not session:
        print("‚ùå –ù–µ—Ç —Å–µ—Å—Å–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return False
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ñ–æ—Ä–º–æ–π
        form_page = session.get(f"{BASE_URL}/admin/payment-methods")
        soup = BeautifulSoup(form_page.text, 'html.parser')
        
        # –ò—â–µ–º CSRF —Ç–æ–∫–µ–Ω
        csrf_token = None
        csrf_input = soup.find('input', {'name': 'csrf_token'})
        if csrf_input:
            csrf_token = csrf_input.get('value')
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –º–µ—Ç–æ–¥–∞
        test_method_data = {
            'name': 'Test Stripe Method',
            'name_en': 'Test Stripe Method',
            'name_de': 'Test Stripe Methode',
            'name_ru': '–¢–µ—Å—Ç–æ–≤—ã–π –º–µ—Ç–æ–¥ Stripe',
            'type': 'stripe',
            'details': json.dumps({
                "url": "https://buy.stripe.com/test_12345",
                "description": "Test payment link"
            }),
            'description_ua': '–¢–µ—Å—Ç–æ–≤–∏–π –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç–∏ —á–µ—Ä–µ–∑ Stripe',
            'description_en': 'Test payment method via Stripe',
            'description_de': 'Test-Zahlungsmethode √ºber Stripe',
            'description_ru': '–¢–µ—Å—Ç–æ–≤—ã–π –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Stripe',
            'is_active': True
        }
        
        if csrf_token:
            test_method_data['csrf_token'] = csrf_token
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        response = session.post(f"{BASE_URL}/admin/payment-method/add", data=test_method_data)
        
        if response.status_code == 302:  # –†–µ–¥–∏—Ä–µ–∫—Ç –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            print("‚úÖ –ü–ª–∞—Ç–µ–∂–Ω—ã–π –º–µ—Ç–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–µ—Ç–æ–¥–∞: {response.status_code}")
            # –ü–µ—á–∞—Ç–∞–µ–º –æ—à–∏–±–∫–∏ —Ñ–æ—Ä–º—ã –µ—Å–ª–∏ –µ—Å—Ç—å
            soup = BeautifulSoup(response.text, 'html.parser')
            error_div = soup.find('div', class_='alert-danger')
            if error_div:
                print(f"–û—à–∏–±–∫–∏ —Ñ–æ—Ä–º—ã: {error_div.get_text()}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–µ—Ç–æ–¥–∞: {e}")
        return False

def run_comprehensive_test():
    """–ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤")
    print("=" * 60)
    
    # –¢–µ—Å—Ç 1: –ü—É–±–ª–∏—á–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    public_success = test_public_payment_page()
    
    # –¢–µ—Å—Ç 2: –í—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω–∫—É
    admin_session = test_admin_login()
    
    # –¢–µ—Å—Ç 3: –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
    admin_success = test_admin_payment_methods(admin_session)
    
    # –¢–µ—Å—Ç 4: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–µ—Ç–æ–¥–∞
    add_success = test_add_payment_method(admin_session)
    
    # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—É–±–ª–∏—á–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    print("\nüîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—É–±–ª–∏—á–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π...")
    public_success_2 = test_public_payment_page()
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"‚úÖ –ü—É–±–ª–∏—á–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–ª–∞—Ç–µ–∂–µ–π: {'‚úì' if public_success else '‚úó'}")
    print(f"‚úÖ –í—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω–∫—É: {'‚úì' if admin_session else '‚úó'}")
    print(f"‚úÖ –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –º–µ—Ç–æ–¥–æ–≤: {'‚úì' if admin_success else '‚úó'}")
    print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–µ—Ç–æ–¥–∞: {'‚úì' if add_success else '‚úó'}")
    print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –ø—É–±–ª–∏—á–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {'‚úì' if public_success_2 else '‚úó'}")
    
    total_tests = 5
    passed_tests = sum([public_success, bool(admin_session), admin_success, add_success, public_success_2])
    
    print(f"\nüéØ –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed_tests == total_tests:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("\n‚ú® –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ:")
        print("   - URL-—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ JSON –ø–æ–ª–µ details")
        print("   - –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –ø–æ–∑–≤–æ–ª—è–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –º–µ—Ç–æ–¥–∞–º–∏")
        print("   - –ü—É–±–ª–∏—á–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ—Ç–æ–¥—ã –∏ URL")
        print("   - –ú–Ω–æ–≥–æ—è–∑—ã—á–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    else:
        print("‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏")
    
    return passed_tests == total_tests

if __name__ == "__main__":
    try:
        run_comprehensive_test()
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
